version: '3.8'

# =============================================================================
# RAG Application Docker Compose Configuration
# =============================================================================
# Profiles:
#   - default: Basic RAG application
#   - production: With nginx reverse proxy and SSL
#   - monitoring: With Prometheus and Grafana
#   - database: With PostgreSQL instead of SQLite
#   - cache: With Redis caching
#   - full: All services enabled
# =============================================================================

services:
  # =============================================================================
  # CORE APPLICATION
  # =============================================================================

  rag-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-production}
    container_name: rag-app
    ports:
      - "${PORT:-8000}:8000"
    environment:
      # Core Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - PORT=8000
      - HOST=0.0.0.0

      # Security
      - SESSION_SECRET=${SESSION_SECRET:-change_me_in_production}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","http://localhost:8000"]}

      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./rag.db}

      # LLM Provider Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-google}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}

      # Model Configuration
      - GOOGLE_MODEL=${GOOGLE_MODEL:-gemini-2.0-flash}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-3-sonnet-20240229}

      # Document Processing
      - MAX_FILES_PER_SESSION=${MAX_FILES_PER_SESSION:-20}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-10}
      - MAX_PAGES_PER_FILE=${MAX_PAGES_PER_FILE:-1000}
      - CHUNK_SIZE=${CHUNK_SIZE:-2000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-200}

      # Performance
      - ENABLE_CACHING=${ENABLE_CACHING:-true}
      - CACHE_TYPE=${CACHE_TYPE:-memory}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}

      # Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}

      # External Services
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - WEAVIATE_URL=${WEAVIATE_URL:-http://weaviate:8080}
    volumes:
      - ./uploads:/app/uploads
      - ./faiss_indices:/app/faiss_indices
      - ./logs:/app/logs
      - rag-data:/app/data
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rag-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rag-app.rule=Host(`localhost`)"
      - "traefik.http.services.rag-app.loadbalancer.server.port=8000"

  # =============================================================================
  # CACHING LAYER
  # =============================================================================

  redis:
    image: redis:7-alpine
    container_name: rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - cache
      - full

  # =============================================================================
  # DATABASE (PostgreSQL)
  # =============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rag_db}
      - POSTGRES_USER=${POSTGRES_USER:-rag_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rag_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rag_user} -d ${POSTGRES_DB:-rag_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - database
      - full

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - rag-app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - production
      - full

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - monitoring
      - full

  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - monitoring
      - full

  # =============================================================================
  # VECTOR DATABASES (Optional)
  # =============================================================================

  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: rag-weaviate
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate-data:/var/lib/weaviate
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - vector-db
      - full

  # =============================================================================
  # ELASTICSEARCH (Optional)
  # =============================================================================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rag-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    profiles:
      - search
      - full

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  adminer:
    image: adminer:latest
    container_name: rag-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - rag-network
    profiles:
      - development
      - database

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  rag-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  weaviate-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
